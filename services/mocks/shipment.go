// Code generated by MockGen. DO NOT EDIT.
// Source: shipment.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	models "github.com/Taras-Rm/shipment/models"
	services "github.com/Taras-Rm/shipment/services"
	gomock "github.com/golang/mock/gomock"
)

// MockShipmentService is a mock of ShipmentService interface.
type MockShipmentService struct {
	ctrl     *gomock.Controller
	recorder *MockShipmentServiceMockRecorder
}

// MockShipmentServiceMockRecorder is the mock recorder for MockShipmentService.
type MockShipmentServiceMockRecorder struct {
	mock *MockShipmentService
}

// NewMockShipmentService creates a new mock instance.
func NewMockShipmentService(ctrl *gomock.Controller) *MockShipmentService {
	mock := &MockShipmentService{ctrl: ctrl}
	mock.recorder = &MockShipmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShipmentService) EXPECT() *MockShipmentServiceMockRecorder {
	return m.recorder
}

// AddShipment mocks base method.
func (m *MockShipmentService) AddShipment(inp services.AddShipmentInput) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShipment", inp)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddShipment indicates an expected call of AddShipment.
func (mr *MockShipmentServiceMockRecorder) AddShipment(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShipment", reflect.TypeOf((*MockShipmentService)(nil).AddShipment), inp)
}

// GetAllShipments mocks base method.
func (m *MockShipmentService) GetAllShipments() ([]models.Shipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllShipments")
	ret0, _ := ret[0].([]models.Shipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllShipments indicates an expected call of GetAllShipments.
func (mr *MockShipmentServiceMockRecorder) GetAllShipments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllShipments", reflect.TypeOf((*MockShipmentService)(nil).GetAllShipments))
}

// GetShipmentByID mocks base method.
func (m *MockShipmentService) GetShipmentByID(id uint) (*models.Shipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShipmentByID", id)
	ret0, _ := ret[0].(*models.Shipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShipmentByID indicates an expected call of GetShipmentByID.
func (mr *MockShipmentServiceMockRecorder) GetShipmentByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShipmentByID", reflect.TypeOf((*MockShipmentService)(nil).GetShipmentByID), id)
}
