// Code generated by MockGen. DO NOT EDIT.
// Source: shipment.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	models "github.com/Taras-Rm/shipment/models"
	gomock "github.com/golang/mock/gomock"
)

// MockShipmentRepository is a mock of ShipmentRepository interface.
type MockShipmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShipmentRepositoryMockRecorder
}

// MockShipmentRepositoryMockRecorder is the mock recorder for MockShipmentRepository.
type MockShipmentRepositoryMockRecorder struct {
	mock *MockShipmentRepository
}

// NewMockShipmentRepository creates a new mock instance.
func NewMockShipmentRepository(ctrl *gomock.Controller) *MockShipmentRepository {
	mock := &MockShipmentRepository{ctrl: ctrl}
	mock.recorder = &MockShipmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShipmentRepository) EXPECT() *MockShipmentRepositoryMockRecorder {
	return m.recorder
}

// CreateShipment mocks base method.
func (m *MockShipmentRepository) CreateShipment(shipment models.Shipment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShipment", shipment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShipment indicates an expected call of CreateShipment.
func (mr *MockShipmentRepositoryMockRecorder) CreateShipment(shipment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShipment", reflect.TypeOf((*MockShipmentRepository)(nil).CreateShipment), shipment)
}

// GetAllShipments mocks base method.
func (m *MockShipmentRepository) GetAllShipments() ([]models.Shipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllShipments")
	ret0, _ := ret[0].([]models.Shipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllShipments indicates an expected call of GetAllShipments.
func (mr *MockShipmentRepositoryMockRecorder) GetAllShipments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllShipments", reflect.TypeOf((*MockShipmentRepository)(nil).GetAllShipments))
}

// GetShipmentByID mocks base method.
func (m *MockShipmentRepository) GetShipmentByID(shipmentID uint) (models.Shipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShipmentByID", shipmentID)
	ret0, _ := ret[0].(models.Shipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShipmentByID indicates an expected call of GetShipmentByID.
func (mr *MockShipmentRepositoryMockRecorder) GetShipmentByID(shipmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShipmentByID", reflect.TypeOf((*MockShipmentRepository)(nil).GetShipmentByID), shipmentID)
}
